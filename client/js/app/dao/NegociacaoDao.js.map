{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","name","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAwB;AAAA;;AACpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAY;AAAA;;AACjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,UAAU,MAAKN,WAAL,CACGO,WADH,CACe,MAAKN,MADpB,EAC4B,WAD5B,EAEGO,WAFH,CAEe,MAAKP,MAFpB,EAGGQ,GAHH,CAGOP,UAHP,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB,aAAK;AACrBN;AACH,iBAFD;;AAIAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAAT,CAAeC,IAA3B;AACAL,4BAAQC,GAAR,CAAY,0CAAZ;AACH,iBAHD;AAMH,aAhBM,CAAP;AAiBH;;;sCAEa;AAAA;;AACV,mBAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIa,SAAS,OAAKlB,WAAL,CACQO,WADR,CACoB,OAAKN,MADzB,EACiC,WADjC,EAEQO,WAFR,CAEoB,OAAKP,MAFzB,EAGQkB,UAHR,EAAb;AAIA,oBAAIC,cAAc,EAAlB;AACAF,uBAAOR,SAAP,GAAmB,aAAK;AACpB,wBAAIW,QAAQP,EAAEC,MAAF,CAASO,MAArB,CADoB,CACS;;AAE7B,wBAAGD,KAAH,EAAU;AACN,4BAAIE,OAAOF,MAAMG,KAAjB;AACAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACAR,8BAAMS,QAAN,GAHM,CAGY;AACrB,qBAJD,MAKK;AACD1B,gCAAQgB,WAAR;AACH;AACJ,iBAXD;;AAaAF,uBAAOP,OAAP,GAAiB,aAAK;AAClBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAAT,CAAeC,IAA3B;AACAZ,2BAAOS,EAAEC,MAAF,CAASC,KAAT,CAAeC,IAAtB;AACH,iBAHD;AAIH,aAvBM,CAAP;AAwBH;;;sCAEa;AAAA;;AACV,mBAAO,IAAId,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,UAAU,OAAKN,WAAL,CACOO,WADP,CACmB,OAAKN,MADxB,EACgC,WADhC,EAEOO,WAFP,CAEmB,OAAKP,MAFxB,EAGO8B,KAHP,EAAd;;AAKAzB,wBAAQI,SAAR,GAAoB,aAAK;AACrBN,4BAAQ,iCAAR;AACH,iBAFD;AAGAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,GAAR,CAAY,yCAAZ;AACAR,2BAAOO,QAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB,CAAP;AACH,iBAHD;AAIH,aAbM,CAAP;AAcH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\n\n    constructor(connection) {\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao) {\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                            .transaction(this._store, 'readwrite')\n                            .objectStore(this._store)\n                            .add(negociacao);\n\n            request.onsuccess = e => {\n                resolve();\n            };\n\n            request.onerror = e => {\n                console.log(e.target.error.name);\n                console.log('Não foi possível adicionar a negociação!');\n            }\n\n\n        })\n    }\n\n    listarTodos() {\n        return new Promise((resolve, reject) => {\n            let cursor = this._connection\n                                .transaction(this._store, 'readwrite')\n                                .objectStore(this._store)\n                                .openCursor();\n            let negociacoes = [];\n            cursor.onsuccess = e => {\n                let atual = e.target.result; // atual é um ponteiro para cada negociacao salva no BD.\n\n                if(atual) {\n                    let dado = atual.value;\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    atual.continue(); // iterador para o próximo ponteiro.\n                }\n                else {\n                    resolve(negociacoes);\n                }\n            }\n\n            cursor.onerror = e => {\n                console.log(e.target.error.name);\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    apagarTodos() {\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                                .transaction(this._store, 'readwrite')\n                                .objectStore(this._store)\n                                .clear();\n\n            request.onsuccess = e => {\n                resolve('Negociações apagadas com êxito!');\n            }\n            request.onerror = e => {\n                console.log('Não foi possível apagar as negociações!');\n                reject(console.log(e.target.error));\n            }\n        });\n    }\n}\n"]}